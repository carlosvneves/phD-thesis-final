%% Import data from text file
% Script for importing data from the following text file:
%
%    filename: D:\Google Drive\_DOUTORADO\__TESE\artigos 2e3\StoNED-ComputeConcaveFn\ComputeConcaveFn\firms.csv
%
% Auto-generated by MATLAB on 18-Feb-2021 17:11:16

%% Setup the Import Options
opts = delimitedTextImportOptions("NumVariables", 8);

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["Var1", "OPEX", "CAPEX", "TOTEX", "Energy", "Length", "Customers", "PerUndGr"];
opts.SelectedVariableNames = ["OPEX", "CAPEX", "TOTEX", "Energy", "Length", "Customers", "PerUndGr"];
opts.VariableTypes = ["string", "double", "double", "double", "double", "double", "double", "double"];
opts = setvaropts(opts, 1, "WhitespaceRule", "preserve");
opts = setvaropts(opts, 1, "EmptyFieldRule", "auto");
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Import the data
firms = readtable("D:\Google Drive\_DOUTORADO\__TESE\artigos 2e3\StoNED-ComputeConcaveFn\ComputeConcaveFn\firms.csv", opts);


%% Clear temporary variables
clear opts


%% OPEX and CAPEX
x = firms{:,1:2};
y = firms{:,4};

%% step 1 - optimize (CNLS algorithm)
[eps,alpha1,beta1,yhat] = ComputeConcaveFn(x,y);

%% (not in use)
% Specifically, Line 44 calculates the largest residual. Line 46 adjusts all
% residuals so that zero indicates efficient performance and larger values
% indicate poor performance. Line 48 calculates the output levels on the
% C2NLS frontier associated with each observation i.
ubenchmark = max(eps);
% The purpose of this line is to impose monotonicity
uCNLS = ubenchmark - eps;
% The purpose of this line is to impose monotonicity by
phiC2NLS = yhat + ubenchmark;
% Farrel efficiency scores
thetaC2NLS = yhat ./ phiC2NLS;

%% step 1.1 - Skewness test
n = 89;
[teststat, teststatt, Pvalue, Flag] = SqB1Test(eps,n);

%% step 2 - Estimation of the expected inefficiency (Methods of Moments)
% Calculate the first and second moments for each observation
M2 = eps.^2;
M3 = eps.^3;

%calculate the average moment
mM2 = sum(M2)/(n-1);
mM3 = sum(M3)/(n-1);

% Check direction of the skewness and if skew is wrong set skewness=0
if(mM3 > 0) 
    mM3 = 0; 
end

% Calculate sigma_u, sigma_v, and st.dev. of the convolution
sigmau = (mM3 / ( ( 2 / pi() ).^(1/2) * ( 1 - 4 / pi()))).^(1/3);
sigmav = (mM2 - ( ( pi() - 2 )/pi() ) * sigmau.^2).^(1/2);
sigma = ( sigmau.^2 + sigmav^.2).^(1/2);

% Calculate lambda signal to noise ration, mu average inefficiency and
% epsilon new residual relative to frontier
lambda = sigmau / sigmav;
mu = ( sigmau.^2 * 2 / pi() ).^(1/2);
epsilon = eps - mu;

%% Step 4: Estimating Firm-Specific Inefficiencies
% JLMS Esxtimator
% Calculate an intermediate variable sigmart
sigmart = sigmau * sigmav / ((sigmau.^2 + sigmav.^2).^(1/2));

% Calculate an intermediate variable mus
mus = epsilon * sigmau / (sigmav * (sigmau.^2 + sigmav.^2).^(1/2));

% Calculate an normal pdf value for various values of mus(i)
norpdf = 1 / (2*pi()).^(1/2) * exp( -(mus).^2 / 2);

%Calculate eff or u_i|e_i
eff = sigmart * ( norpdf / (1 - normcdf(mus)) - mus);
